/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sequitursort;

import java.util.*;
import javax.swing.JOptionPane;

/**
 *
 * @author Alan Curley
 */
public class sequiturSortGUI extends javax.swing.JFrame {

    private Map<String,Integer> segmentTimes; //This is the list of times in a hashmap.
    /**
     * Creates new form sequiturSortGUI
     */
    public sequiturSortGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        taSequitur = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taSegments = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        goButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        taSequitur.setColumns(20);
        taSequitur.setRows(5);
        jScrollPane1.setViewportView(taSequitur);

        jLabel1.setText("1 - Paste Sequitur output here (Rules only - please remove headers)");

        jLabel2.setText("2 - Paste Segment labels and Execution times here ");

        taSegments.setColumns(20);
        taSegments.setRows(5);
        jScrollPane2.setViewportView(taSegments);

        jLabel3.setText("3 - Press \"GO\" when finished");

        goButton.setText("GO");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(goButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addContainerGap(31, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(goButton)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This is the function called when the user presses the "GO" button.
     * @param evt 
     */
    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        // Build the tempArray
        String[] tempString = taSegments.getText().split("(\\r|\\n)"); // one array entry per line.         
        segmentTimes = new HashMap<String,Integer>();
                                                                 // Each line will be "Mark,ExecTime".
        for(String s:tempString){
            String[] tempArray = s.split(",");
            if(tempArray.length>1)
                segmentTimes.put(tempArray[0], Integer.valueOf(tempArray[1]));
        }
        
        tempString = taSequitur.getText().split("[\\r\\n]");
        ArrayList<ruleRep> rules = new ArrayList<>();
        
        for(String s:tempString)
            rules.add(new ruleRep(s));        
        
        // now we have a list of rules from within the program, and a list of segments and associated times.
        boolean loopsComplete;
        for(int i=0; i<rules.size();i++){ // do this a max number of times            
            loopsComplete = true;
            for(ruleRep rR:rules){
                if(!rR.checkKnownSegments(segmentTimes)){
                    JOptionPane.showMessageDialog(null,"Error - Unknown Segment", "Error", JOptionPane.ERROR_MESSAGE);
                    //System.exit(0);
                    break;
                }
                segmentTimes = rR.sortRuleRep(segmentTimes);                                                    
                if(!rR.isComplete()) // if any of the loops are incomplete - 
                    loopsComplete = false; // mark as such.
            }
            if(loopsComplete) // if loopsComplete is still TRUE - all loops have been addressed.
                i = rules.size(); // update i to exit the loop                
        }
        // At this stage, print off each rule and it's associated execution time.
        System.out.println("Name,Execution Time,Complete?");
        for(ruleRep rR:rules)
            System.out.println(rR.getRuleSortDetails());
    }//GEN-LAST:event_goButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sequiturSortGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sequiturSortGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sequiturSortGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sequiturSortGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sequiturSortGUI().setVisible(true);
            }
        });
    }
    
    /**
     * A Class for each "Rule Representation" in the Sequitur output window.
     * <br/><i>Basically this represents a row</i>
     */
    public class ruleRep{        
        private boolean complete = false;
        private String name = "";
        ArrayList<String> charList;
        Integer ruleTime = 0;
        /**
         * Constructor - requires a string that represents the rule.
         * @param lineEntry 
         */
        public ruleRep(String lineEntry){
            charList = new ArrayList<>();
            String rule, tempString;
            rule = lineEntry.substring(lineEntry.indexOf("R")-1).trim();
            name = rule.substring(0, rule.indexOf("->")-1).trim();
            tempString = rule.substring(rule.indexOf("->")+2);
            tempString = tempString.substring(0, tempString.length()-1).trim();
            tempString = tempString.replaceAll("\\W*,\\W*", ",");
            //charList.addAll(Arrays.asList(lineEntry.substring(lineEntry.indexOf("->")).split(","))); //<<<<< Updated via netbeans reccommendations.                        
            charList.addAll(Arrays.asList(tempString.split(","))); //<<<<< Updated via netbeans reccommendations.                        
        }
        
        public boolean isComplete(){return complete;}
        
        /**
         * Function for which replaces the segment names with the times.
         * 
         * @param segmentTimes a hashmap containing &lt;SegmentName,segmentTime&gt;
         * @return TRUE if the segment is complete - FALSE if not.
         */
        public Map sortRuleRep(Map segmentTimes){
            complete = true; // start by assuming all items are on the list.
            for(int i=0; i<charList.size(); i++){
                if(segmentTimes.containsKey(charList.get(i))){ // check if this is on the list.
                    ruleTime += (Integer)segmentTimes.get(charList.get(i)); // increase the time for this rule
                    charList.remove(i--); // remove this from the list.                    
                    //System.out.println(charList.get(i)+","+String.valueOf(ruleTime));
                }
                else
                    complete = false;
            }        
            if(complete)
                segmentTimes.put(name, ruleTime);
            return segmentTimes;
        }
        
        public boolean checkKnownSegments(Map segmentTimes){
            if(charList == null|charList.size()==0) // if the charList has not been initialised
                return complete; // then we can't check known segments.
            for(String s:charList){ // otherwise, go though each symbol(character) in the rule
                if(!(s.startsWith("R")|segmentTimes.containsKey(s))) // if it isn't a rule but doesn't exist on the list
                    return false;   // then this is an invalid setup.
            }
            return true; // otherwise, we're all good.
        }
        
        /** Return the String results of the Sorting **/
        public String getRuleSortDetails(){return this.name+","+String.valueOf(this.ruleTime)+","+String.valueOf(complete);}
    }
    
    /**
     * A Class for each "character" in the Sequitur output window.
     * <br/><i>Basically this represents a cell</i>
     */
    public abstract class segment{
        private boolean isSegment = false;
        private boolean isRule = false;
        private String segmentName = "";
        private Integer executionTime = 0;
        private boolean complete = false;
        
        public segment(String name){            
            this.segmentName = name;
            if(name.contains("R")){
                isRule = true;
                isSegment = false;
            }
            else{
                isSegment = true;            
                isRule = false;
            }
        }
        
        public String getName(){
            return segmentName;
        }
        
        public boolean isRule(){
            return isRule;
        }
        
        public void setTime(Integer thisTime){
            executionTime = thisTime;   
            complete = true;
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton goButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea taSegments;
    private javax.swing.JTextArea taSequitur;
    // End of variables declaration//GEN-END:variables
}

